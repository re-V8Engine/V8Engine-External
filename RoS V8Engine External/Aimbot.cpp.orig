#include "stdafx.h"

D3DXVECTOR3 tAimbot::tAimbotFunctions::ClampAngle(D3DXVECTOR3 ViewAngle)
{   if (ViewAngle.x > 89.0f && ViewAngle.x <= 180.0f)
    {   ViewAngle.x = 89.0f; }
    if (ViewAngle.x > 180.f)
    {   ViewAngle.x -= 360.f; }
    if (ViewAngle.x < -89.0f)
    {   ViewAngle.x = -89.0f; }
    if (ViewAngle.y > 180.f)
    {   ViewAngle.y -= 360.f; }
    if (ViewAngle.y < -180.f)
    {   ViewAngle.y += 360.f; }
    if (ViewAngle.z != 0.0f)
    {   ViewAngle.z = 0.0f; }
    return ViewAngle; }

float  tAimbot::tAimbotFunctions::Get3dDistance(D3DXVECTOR3 PlayerPosition, D3DXVECTOR3 EnemyPosition)
{   return sqrt(powf(EnemyPosition.x - PlayerPosition.x, 2.0) + powf(EnemyPosition.y - PlayerPosition.y, 2.0) + powf(EnemyPosition.z - PlayerPosition.z, 2.0)); }

float  tAimbot::tAimbotFunctions::GetRandomFloat(float min, float max)
{   std::random_device Random;
    std::mt19937 RandomGenerator(Random());
    std::uniform_real<float> RandomDistribute(min, max);
    return RandomDistribute(RandomGenerator); }

D3DXVECTOR3 tAimbot::tAimbotFunctions::CalcAngle(D3DXVECTOR3 PlayerPosition, D3DXVECTOR3 EnemyPosition, D3DXVECTOR3 PunchAngle, D3DXVECTOR3 ViewOrigin, float YawRecoilReductionFactor, float PitchRecoilReductionFactor)
{

    D3DXVECTOR3 AimAngle;
    D3DXVECTOR3 Delta = { (PlayerPosition.x - EnemyPosition.x), (PlayerPosition.y - EnemyPosition.y), ((PlayerPosition.z + ViewOrigin.z) - EnemyPosition.z) };
    float hyp = sqrt(Delta.x * Delta.x + Delta.y * Delta.y);
    AimAngle.x = atanf(Delta.z / hyp) * 57.295779513082f - PunchAngle.x * YawRecoilReductionFactor;
    AimAngle.y = atanf(Delta.y / Delta.x) * 57.295779513082f - PunchAngle.y * PitchRecoilReductionFactor;
    AimAngle.z = 0.0f;
    if (Delta.x >= 0.0)
    {   AimAngle.y += 180.0f; }
    return ClampAngle(AimAngle); }

D3DXVECTOR3 tAimbot::tAimbotFunctions::SmoothAngle(D3DXVECTOR3 SourceAngle, D3DXVECTOR3 DestinationAngle, float SmoothPercent)
{   D3DXVECTOR3 SmoothedAngle;
    SmoothedAngle = DestinationAngle - SourceAngle;
    SmoothedAngle = ClampAngle(SmoothedAngle);
    SmoothedAngle = SourceAngle + SmoothedAngle / 100.f * (100.f - SmoothPercent);
    return ClampAngle(SmoothedAngle); }
D3DXVECTOR3 tAimbot::tAimbotFunctions::VelocityComp(D3DXVECTOR3 EnemyPosition, D3DXVECTOR3 EnemyVelocity, D3DXVECTOR3 PlayerVelocity, float Distance)
{   EnemyPosition += EnemyVelocity / Distance;
    EnemyPosition -= PlayerVelocity / Distance;
    return EnemyPosition; }

void tAimbot::tAimbotFunctions::Tick()
{   if (pGlobalVars.AimbotSettings.Enabled)
    {   if (GetAsyncKeyState(pGlobalVars.AimbotSettings.ActivationKey)  < 0)
        {   tLocalPlayerEntity LocalPlayerEntity = pLocalPlayerEntity;
            if (LocalPlayerEntity.Valid && LocalPlayerEntity.CrosshairEntityIndex > -1 && LocalPlayerEntity.CrosshairEntityIndex < 64)
            {   int CrosshairEntityIndex = LocalPlayerEntity.CrosshairEntityIndex;
                tGeneralPlayerEntity GeneralPlayerEntity = pGeneralPlayerEntity[CrosshairEntityIndex];
                int Timer = 0;
                if (GeneralPlayerEntity.Valid && LocalPlayerEntity.Valid && GeneralPlayerEntity.TeamNumber != LocalPlayerEntity.TeamNumber && LocalPlayerEntity.ShotsFired >= pGlobalVars.AimbotSettings.IgnoreShotCount && GetAsyncKeyState(pGlobalVars.AimbotSettings.ActivationKey) < 0)
                {   if (pGlobalVars.AimbotSettings.EnableFire)
                    {   mouse_event(MOUSEEVENTF_LEFTDOWN, NULL, NULL, NULL, NULL); } }
                while (GeneralPlayerEntity.Valid && LocalPlayerEntity.Valid && GeneralPlayerEntity.TeamNumber != LocalPlayerEntity.TeamNumber && LocalPlayerEntity.ShotsFired >= pGlobalVars.AimbotSettings.IgnoreShotCount && GetAsyncKeyState(pGlobalVars.AimbotSettings.ActivationKey) < 0)
                {   LocalPlayerEntity = pLocalPlayerEntity;
                    GeneralPlayerEntity = pGeneralPlayerEntity[CrosshairEntityIndex];
                    if (GeneralPlayerEntity.Valid && LocalPlayerEntity.Valid && GeneralPlayerEntity.TeamNumber != LocalPlayerEntity.TeamNumber)
                    {   if (!pGlobalVars.AimbotSettings.TargetJumpingPlayers && GeneralPlayerEntity.Functions.IsJumping(GeneralPlayerEntity.Flags) )
                        {   break; }
                        float YawRecoilReductionFactor, PitchRecoilReductionFactor;
                        if (pGlobalVars.AimbotSettings.EnableRandomYawRecoilReductionFactor)
                        {   YawRecoilReductionFactor = GetRandomFloat(pGlobalVars.AimbotSettings.MinRandomYaw, pGlobalVars.AimbotSettings.MaxRandomYaw); }
                        else
                        {   YawRecoilReductionFactor = pGlobalVars.AimbotSettings.StaticYaw; }
                        if (pGlobalVars.AimbotSettings.EnableRandomPitchRecoilReductionFactor)
                        {   PitchRecoilReductionFactor = GetRandomFloat(pGlobalVars.AimbotSettings.MinRandomPitch, pGlobalVars.AimbotSettings.MaxRandomPitch); }
                        else
                        {   PitchRecoilReductionFactor = pGlobalVars.AimbotSettings.StaticPitch; }
                        D3DXVECTOR3 AimAngle = ClampAngle(SmoothAngle(LocalPlayerEntity.ViewAngle, ClampAngle(CalcAngle(LocalPlayerEntity.Origin, VelocityComp(GeneralPlayerEntity.Functions.GetBonePosition(GeneralPlayerEntity.BoneMatrix, pGlobalVars.AimbotSettings.TargetBone), GeneralPlayerEntity.Velocity, LocalPlayerEntity.Velocity, Get3dDistance(LocalPlayerEntity.Origin, GeneralPlayerEntity.Origin)), LocalPlayerEntity.PunchAngle, LocalPlayerEntity.ViewOrigin, YawRecoilReductionFactor, PitchRecoilReductionFactor)), pGlobalVars.AimbotSettings.SmoothPercent));
                        LocalPlayerEntity.Functions.SetViewAngle(LocalPlayerEntity.ClientStateBaseAddress, pGlobalVars.Offsets.m_dwViewAngle, AimAngle); }
                    Sleep(1);
                    Timer++;
                    if (pGlobalVars.AimbotSettings.EnableTimeout && Timer == pGlobalVars.AimbotSettings.Timeout)
                    {   break; } }
                if (pGlobalVars.AimbotSettings.EnableFire)
                {   mouse_event(MOUSEEVENTF_LEFTUP, NULL, NULL, NULL, NULL); } } } } }