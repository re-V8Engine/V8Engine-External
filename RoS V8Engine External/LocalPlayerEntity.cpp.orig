#include "stdafx.h"

DWORD tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetBaseAddress(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<DWORD>(BaseAddress + Offset); }

DWORD tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetClientStateBaseAddress(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<DWORD>(BaseAddress + Offset); }

int tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetShotsFired(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<int>(BaseAddress + Offset); }

int tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetCrosshairEntityIndex(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<int>(BaseAddress + Offset) - 1; }

bool tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetLifeState(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<bool>(BaseAddress + Offset); }

D3DXVECTOR3 tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetPunchAngle(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<D3DXVECTOR3>(BaseAddress + Offset); }

int tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetTeamNumber(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<int>(BaseAddress + Offset); }

D3DXVECTOR3 tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetOrigin(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<D3DXVECTOR3>(BaseAddress + Offset); }

D3DXVECTOR3 tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetVelocity(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<D3DXVECTOR3>(BaseAddress + Offset); }

D3DXVECTOR3 tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetViewOrigin(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<D3DXVECTOR3>(BaseAddress + Offset); }

D3DXVECTOR3 tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetViewAngle(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<D3DXVECTOR3>(BaseAddress + Offset); }

int tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetIndex(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<int>(BaseAddress + Offset); }

tLocalPlayerEntity::tDataStructs::tViewMatrix tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetViewMatrix(DWORD BaseAddress, DWORD Offset)
{   return pIO.Functions.Read<tLocalPlayerEntity::tDataStructs::tViewMatrix>(BaseAddress + Offset); }

void tLocalPlayerEntity::tLocalPlayerEntityFunctions::SetViewAngle(DWORD BaseAddress, DWORD Offset, D3DXVECTOR3 ViewAngle)
{   pIO.Functions.Write<D3DXVECTOR3>(BaseAddress + Offset, ViewAngle); }

tLocalPlayerEntity tLocalPlayerEntity::tLocalPlayerEntityFunctions::GetLocalPlayerEntityInfo()
{   tLocalPlayerEntity TempLocalPlayerEntity;
    TempLocalPlayerEntity.Valid = false;
    if (pIO.ClientModuleBaseAddress)
    {   TempLocalPlayerEntity.BaseAddress = GetBaseAddress(pIO.ClientModuleBaseAddress, pGlobalVars.Offsets.m_dwLocalPlayer);
        if (TempLocalPlayerEntity.BaseAddress && pIO.EngineModuleBaseAddress)
        {   TempLocalPlayerEntity.ClientStateBaseAddress = GetClientStateBaseAddress(pIO.EngineModuleBaseAddress, pGlobalVars.Offsets.m_dwClientState);
            if (TempLocalPlayerEntity.ClientStateBaseAddress)
            {   TempLocalPlayerEntity.Index = GetIndex(pLocalPlayerEntity.ClientStateBaseAddress, pGlobalVars.Offsets.m_dwLocalPlayerIndex);
                TempLocalPlayerEntity.CrosshairEntityIndex = GetCrosshairEntityIndex(pLocalPlayerEntity.BaseAddress, pGlobalVars.Offsets.m_iCrossHairID);
                TempLocalPlayerEntity.LifeState = GetLifeState(pLocalPlayerEntity.BaseAddress, pGlobalVars.Offsets.m_lifeState);
                TempLocalPlayerEntity.Origin = GetOrigin(pLocalPlayerEntity.BaseAddress, pGlobalVars.Offsets.m_vecOrigin);
                TempLocalPlayerEntity.PunchAngle = GetPunchAngle(pLocalPlayerEntity.BaseAddress, pGlobalVars.Offsets.m_vecPunch);
                TempLocalPlayerEntity.ShotsFired = GetShotsFired(pLocalPlayerEntity.BaseAddress, pGlobalVars.Offsets.m_iShotsFired);
                TempLocalPlayerEntity.TeamNumber = GetTeamNumber(pLocalPlayerEntity.BaseAddress, pGlobalVars.Offsets.m_iTeamNum);
                TempLocalPlayerEntity.Velocity = GetVelocity(pLocalPlayerEntity.BaseAddress, pGlobalVars.Offsets.m_vecVelocity);
                TempLocalPlayerEntity.ViewAngle = GetViewAngle(pLocalPlayerEntity.ClientStateBaseAddress, pGlobalVars.Offsets.m_dwViewAngle);
                TempLocalPlayerEntity.ViewOrigin = GetViewOrigin(pLocalPlayerEntity.BaseAddress, pGlobalVars.Offsets.m_vecViewOffset);
                TempLocalPlayerEntity.ViewMatrix = GetViewMatrix(pIO.ClientModuleBaseAddress, pGlobalVars.Offsets.m_dwViewMatrix);
                TempLocalPlayerEntity.Valid = true; } } }
    return TempLocalPlayerEntity; }